swagger: "2.0"
info:
  title: "wego_ride"
  version: "1.0"
  description: "API documentation for wego_ride"
paths:
  #Swagger_admin
  /api/swagger_admin/admin-register:
    post:
      summary: "Register a new admin"
      description: "Registers a new admin with the required user data."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                example: "dani"
              first_name:
                type: string
                example: "daniel"
              last_name:
                type: string
                example: "abera"
              email:
                type: string
                format: email
                example: "admin@example.com"
              phone_number:
                type: string
                example: "+251934567890"
              password_hash:
                type: string
                example: "secure_password_hash"
              admin_level:
                type: string
                example: "superadmin"
                example2: "moderator"
      responses:
        201:
          description: "admin registered successfully"
          schema:
            type: object
            properties:
              user:
                type: string
                example: "Admin Id"
        400:
          description: "Missing required user data"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "username missing"
        415:
          description: "Unsupported media type"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "only superadmin allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/login:
    post:
      summary: "admin login"
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "jwt generated code"
        415:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "email missing"
                example2: "incorrect password"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  /api/swagger_admin/logout:

  ##Admin Rider and Driver Management
  /api/swagger_admin/riders:
    get:
      summary: "get all rider users"
      responses:
        200:
          schema:
            type: object
            properties:
              riders:
                type: list
                example: [{ "riders_key": "value" }, { "riders_key": "value" }]
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/drivers:
    get:
      summary: "get all driver users"
      responses:
        200:
          schema:
            type: object
            properties:
              drivers:
                type: list
                example:
                  [{ "drivers_key": "value" }, { "drivers_key": "value" }]
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/block-user/{user_id}:
    put:
      summary: "blocks user by user id"
      parameters:
        - name: user_id
          in: path
          type: string
          required: true
          description: "The ID of the user to block"
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "driver blocked"
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "user not found"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "unable to block driver"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "an internal error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "only superadmin allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/unblock-user/{user_id}:
    put:
      summary: "unblocks user by user id"
      parameters:
        - name: user_id
          in: path
          type: string
          required: true
          description: "The ID of the user to unblock"
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "driver unblocked"
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "user not found"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "unable to unblock driver"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "an internal error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "only superadmin allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/delete-user/{user_id}:
    put:
      summary: "deletes user by user id"
      parameters:
        - name: user_id
          in: path
          type: string
          required: true
          description: "The ID of the user to delete"
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "driver deleted"
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "user not found"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "unable to delete driver"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "an internal error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "only superadmin allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/revalidate-user/{user_id}:
    put:
      summary: "revalidates user by user id"
      parameters:
        - name: user_id
          in: path
          type: string
          required: true
          description: "The ID of the user to revalidate"
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "driver revalidated"
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "user not found"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "unable to revalidate driver"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "an internal error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "only superadmin allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/deleted-users/<user_type>:
    get:
      summary: "get all deleted users by user_type"
      parameters:
        - name: user_type
          in: path
          type: string
          required: true
          description: "The type of the users to get"
      responses:
        200:
          schema:
            type: object
            properties:
              users:
                type: list
                example:
                  [{ "drivers_key": "value" }, { "drivers_key": "value" }]
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/blocked-users/{user_type}:
    get:
      summary: "get all blocked users by user_type"
      parameters:
        - name: user_type
          in: path
          type: string
          required: true
          description: "The type of the users to get"
      responses:
        200:
          schema:
            type: object
            properties:
              users:
                type: list
                example:
                  [{ "drivers_key": "value" }, { "drivers_key": "value" }]
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/user-profile/{user_id}:
    get:
      summary: "get user-profile by user_id"
      parameters:
        - name: user_id
          in: path
          type: string
          required: true
          description: "The ID of the user to get"
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: dict
                example: { "drivers_key": "value" }
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "user not found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/{user_type}/{search_type}/{search_by}:
    get:
      summary: "search user by user-type, search_type and search_by"
      parameters:
        - name: user-data
          in: path
          required: true
          description: "user-type indicate which user to search to i.e. Admin, Driver or Rider"
          schema:
            type: string
            enum: [Admin, Driver, Rider]
        - name: search_type
          in: path
          required: true
          description: "Specifies the field to search by (e.g., username, email, last_name)"
          schema:
            type: string
        - name: search_by
          in: path
          required: true
          description: "The value to search for (e.g., a name, email address, ...)"
          schema:
            type: string
      responses:
        200:
          schema:
            type: object
            properties:
              users:
                type: list
                example: { "users_key": "value" }
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Requirement missing, incorrect format or incorrect attribute"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Admin Ride Management
  /api/swagger_admin/get-rides:
    get:
      summary: "get all rides"
      responses:
        200:
          schema:
            type: object
            properties:
              trips:
                type: dict
                example: { "trip1_keys": "value", "trip2_keys": "value" }
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "an internal error"
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "trip not found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/get-ride/{ride_id}:
    get:
      summary: "get ride by ride_id"
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
          description: "The ID of the ride to get"
      responses:
        200:
          schema:
            type: object
            properties:
              ride:
                type: dict
                example: { "ride1_keys": "value", "ride2_keys": "value" }
        404:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "ride not found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/delete-ride/{ride_id}:
    put:
      summary: "Delete a ride by ID"
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
          description: "The ID of the ride to delete"
      responses:
        200:
          description: "Ride deleted successfully"
          schema:
            type: object
            properties:
              admin:
                type: string
                example: "Ride deleted"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/set-location:
    post:
      summary: "Set a new location"
      parameters:
        - name: location_data
          in: body
          required: true
          schema:
            type: object
            properties:
              latitude:
                type: number
                example: 1.2921
              longitude:
                type: number
                example: 36.8219
              address:
                type: string
                example: "Adama"
      responses:
        200:
          description: "Location created successfully"
          schema:
            type: object
            properties:
              location:
                type: string
                example: "location created"
        400:
          description: "Missing required location data"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "latitude missing"
        415:
          description: "Unsupported media type"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/get-locations:
    get:
      summary: "Get all available locations"
      responses:
        200:
          description: "List of all locations"
          schema:
            type: object
            properties:
              locations:
                type: array
                items:
                  type: object
                  properties:
                    latitude:
                      type: number
                      example: -1.2921
                    longitude:
                      type: number
                      example: 36.8219
                    address:
                      type: string
                      example: "Adama"
        404:
          description: "No locations found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "location not found"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/set-ride:
    post:
      summary: "Create a ride"
      description: "Creates a new ride with the specified details."
      parameters:
        - name: ride_data
          in: body
          required: true
          schema:
            type: object
            properties:
              driver_id:
                type: string
                example: "123"
              pickup_location_id:
                type: string
                example: "456"
              dropoff_location_id:
                type: string
                example: "789"
              pickup_time:
                type: string
                format: date-time
                example: "2024-11-01T09:00:00Z"
              dropoff_time:
                type: string
                format: date-time
                example: "2024-11-01T10:00:00Z"
              fare:
                type: number
                example: 50.00
              distance:
                type: number
                example: 10.5
              status:
                type: string
                example: "ongoing"
              is_available:
                type: boolean
                example: true
      responses:
        200:
          description: "Ride created successfully"
          schema:
            type: object
            properties:
              ride:
                type: string
                example: "ride created"
        400:
          description: "Missing required ride data"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "pickup_location_id missing"
        415:
          description: "Unsupported media type"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Admin Payment Management
  /api/swagger_admin/transactions:
    get:
      summary: "Get all transactions"
      description: "Retrieve a list of all transactions, sorted by payment time in descending order."
      responses:
        200:
          description: "List of transactions"
          schema:
            type: object
            properties:
              admin:
                type: array
                items:
                  type: object
                  example:
                    payment_id: "1"
                    amount: 50.0
                    payment_time: "2024-10-01T09:00:00Z"
        404:
          description: "No transactions found"
          schema:
            type: object
            properties:
              admin:
                type: string
                example: "Transactions not found"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/payment-detail/{ride_id}:
    get:
      summary: "Get payment details for a ride"
      description: "Retrieve payment details for a specific ride, including total amount paid, payment status, and rider details."
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
          description: "The ID of the ride to get payment details for"
      responses:
        200:
          description: "Payment details retrieved successfully"
          schema:
            type: object
            properties:
              payment:
                type: object
                properties:
                  trip:
                    type: object
                    description: "Trip details"
                    example:
                      id: "ride_id"
                      driver_id: "123"
                  total_paid_amount:
                    type: number
                    example: 150.00
                  payment_status:
                    type: array
                    items:
                      type: string
                      example: "completed"
                  number_of_riders:
                    type: integer
                    example: 3
                  riders:
                    type: array
                    items:
                      type: object
                      properties:
                        rider_id:
                          type: string
                          example: "rider123"
                        payment:
                          type: object
                          properties:
                            amount:
                              type: number
                              example: 50.00
                            payment_status:
                              type: string
                              example: "completed"
        404:
          description: "Ride not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "ride not found"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/admin/payment/{ride_id}:
    get:
      summary: "Get payment details by ride ID"
      description: "Retrieve payment details for a specified ride ID. Requires admin access."
      parameters:
        - name: ride_id
          in: path
          required: true
          description: "The ID of the ride to fetch payment details for."
          schema:
            type: string
      responses:
        200:
          description: "Payment details retrieved successfully."
          schema:
            type: object
            properties:
              payment:
                type: object
                example:
                  trip_id: "ride12345"
                  driver_id: "driver67890"
                  trip_fare: 250.75
                  total_revenue: 300.00
                  driver_earning: 200.00
                  driver_commission: 50.00
                  total_number_of_riders: 4
                  number_of_riders_paid: 3
                  number_of_riders_not_paid: 1
                  transaction_over: true
                  transaction_time: "2024-11-19T15:30:00Z"
                  status: "completed"
        404:
          description: "Payment not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Payment not found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  ##Admin Reports And Analytics
  /api/swagger_admin/reports/earnings/{date}:
    get:
      summary: "Get earnings report"
      description: "Retrieve earnings report for all time or by a provided date."
      parameters:
        - name: date
          in: path
          required: false
          description: "The specific date for earnings in the format 'dd-mm-yyyy'. If not provided, fetches all earnings."
          schema:
            type: string
            example: "19-11-2024"
      responses:
        200:
          description: "Earnings report retrieved successfully."
          schema:
            type: object
            properties:
              Admin:
                type: object
                example:
                  total_revenue:
                    total_platform_earning: 1000.0
                    total_driver_earning: 500.0
                    total: 1500.0
                  today_earning:
                    total_platform_earning: 200.0
                    total_driver_earning: 300.0
                    total: 500.0
                  this_month:
                    total_platform_earning: 400.0
                    total_driver_earning: 600.0
                    total: 1000.0
        404:
          description: "No payments found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No earnings data found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/reports/ride-activity:
    get:
      summary: "Get ride activity report"
      description: "Retrieve detailed reports of ride activities, grouped by status, drivers, locations, and time."
      responses:
        200:
          description: "Ride activity report retrieved successfully."
          schema:
            type: object
            properties:
              Admin:
                type: object
                example:
                  total_rides: 100
                  rides_by_status:
                    completed: 80
                    canceled: 10
                    in-progress: 10
                  ride_by_driver:
                    driver1: 30
                    driver2: 50
                  ride_by_location:
                    location1.location2: 20
                    location3.location4: 80
                  ride_by_time:
                    morning: 40
                    afternoon: 30
                    evening: 30
                  ride_by_payment:
                    paid: 90
                    pending: 10
        404:
          description: "No rides found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No ride activity data found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/reports/announcements:
    get:
      summary: "Get announcements"
      description: "Retrieve all announcements sent by the admin."
      responses:
        200:
          description: "Announcements retrieved successfully."
          schema:
            type: object
            properties:
              announcemet:
                type: dict
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "notif123"
                    created_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    updated_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
                    sent_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    sender_id:
                      type: string
                      example: "admin123"
                    receiver_id:
                      type: string
                      example: "rider456"
                    message:
                      type: string
                      example: "System maintenance scheduled for tomorrow."
                    notification_type:
                      type: string
                      example: "announcement"
                    is_read:
                      type: boolean
                      example: false
                    read_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
        404:
          description: "No announcements found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No announcements available"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/reports/issues:
    get:
      summary: "Get reported issues"
      description: "Retrieve all reported issues submitted to the admin."
      responses:
        200:
          description: "Issues retrieved successfully."
          schema:
            type: object
            properties:
              issues:
                type: dict
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "notif123"
                    created_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    updated_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
                    sent_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    sender_id:
                      type: string
                      example: "rider292i1w"
                    receiver_id:
                      type: string
                      example: "rider456"
                    message:
                      type: string
                      example: "payment not working"
                    notification_type:
                      type: string
                      example: "issue"
                    is_read:
                      type: boolean
                      example: false
                    read_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
        404:
          description: "No issues found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No reported issues available"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/reports/issue/{issue_id}:
    get:
      summary: "Get a specific reported issue"
      description: "Retrieve details of a specific reported issue by its ID."
      parameters:
        - name: issue_id
          in: path
          required: true
          description: "The ID of the issue to retrieve."
          schema:
            type: string
      responses:
        200:
          description: "Issue details retrieved successfully."
          schema:
            type: object
            properties:
              issue:
                type: dict
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "notif123"
                    created_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    updated_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
                    sent_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T08:00:00Z"
                    sender_id:
                      type: string
                      example: "rider292i1w"
                    receiver_id:
                      type: string
                      example: "rider456"
                    message:
                      type: string
                      example: "payment not working"
                    notification_type:
                      type: string
                      example: "issue"
                    is_read:
                      type: boolean
                      example: false
                    read_at:
                      type: string
                      format: datetime
                      example: "2024-11-19T10:00:00Z"
        404:
          description: "Issue not found"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Issue not found"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example3: "Admin access required"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_admin/notification:
    post:
      summary: "Set a notification"
      description: "Set a notification for the specified users (riders, drivers, or admins) based on the provided data."
      parameters:
        - name: body
          in: body
          required: true
          description: "The notification details to be set."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Maintenance scheduled for tomorrow"
              notification_type:
                type: string
                example: "maintenance"
              to:
                type: string
                enum: ["all", "Driver", "Rider", "Admin"]
                example: "all"
      responses:
        200:
          description: "Notification sent successfully."
          schema:
            type: object
            properties:
              admin:
                type: string
                example: "sent"
        400:
          description: "Bad request due to missing required fields."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "message missing"
        415:
          description: "Unsupported Media Type (invalid or missing JSON in the request)."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported Media Type"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        401:
          description: "Unauthorized to access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
        403:
          description: "Access not allowed (admin access required)."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "Admin access required"

  #Swagger_driver
  /api/swagger_driver/register:
    post:
      summary: "Register a new driver"
      description: "Registers a new driver with the required user data."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                example: "dani"
              first_name:
                type: string
                example: "daniel"
              last_name:
                type: string
                example: "abera"
              email:
                type: string
                format: email
                example: "driver@example.com"
              phone_number:
                type: string
                example: "+251934567890"
              password_hash:
                type: string
                example: "secure_password_hash"
              payment_method:
                type: string
                example: "TeleBirr"
      responses:
        201:
          description: "Driver registered successfully"
          schema:
            type: object
            properties:
              user:
                type: string
                example: "Driver Id"
        400:
          description: "Missing required user data"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "username missing"
        415:
          description: "Unsupported media type"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  /api/swagger_driver/login:
    post:
      summary: "driver login"
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "jwt generated code"
        415:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "email missing"
                example2: "incorrect password"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  /api/swagger_driver/logout:

  ##Driver Profile Management
  /api/swagger_driver/reset-token:
    post:
      summary: "Request a reset token"
      description: "Sends a reset token to the driver's email."
      parameters:
        - name: email
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: "driver@example.com"
      responses:
        201:
          description: "Reset token generated successfully"
          schema:
            type: object
            properties:
              reset_token:
                type: string
                example: "reset-token-123"
        400:
          description: "Email missing from request"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "email not given"
        404:
          description: "User not found"
        415:
          description: "Unsupported media type"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/forget-password:
    post:
      summary: "Reset password using token"
      description: "Allows driver to reset password using a provided reset token."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              reset_token:
                type: string
                example: "reset-token-123"
              password_hash:
                type: string
                example: "new_secure_password_hash"
      responses:
        200:
          description: "Password updated successfully"
          schema:
            type: object
            properties:
              update:
                type: string
                example: "Successful"
        400:
          description: "Missing or incorrect information"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "password not provided"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/profile:
    get:
      summary: "Get driver profile"
      description: "Retrieves the profile information of the authenticated driver."
      responses:
        200:
          description: "Driver profile data"
          schema:
            type: object
            properties:
              user:
                type: object
                example: { "users_key": "value" }
        404:
          description: "User not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
    put:
      summary: "Update driver profile"
      description: "Allows driver to update their profile and password by provideing they informations they want to update."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: "abrha"
              last_name:
                type: string
                example: "john"
              password_hash:
                type: string
                example: "new_secure_password_hash"
              old_password:
                type: string
                example: "old_password"
      responses:
        200:
          description: "Profile updated successfully"
          schema:
            type: object
            properties:
              user:
                type: string
                example: "updated Successfully"
        400:
          description: "Missing required information or incorrect password"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "old password incorrect"
        500:
          description: "Update failed due to server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/profile/image:
    get:
      summary: "Get the profile image of the user"
      description: "Retrieve the profile picture for the user if it exists."
      responses:
        200:
          description: "Profile image retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: "The profile image of the user"
        404:
          description: "Image not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "image not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        401:
          description: "Unauthorized to access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
        403:
          description: "Access not allowed."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
                example2: "Admin access required"
    post:
      summary: "Upload a profile image for the user"
      description: "Upload a profile picture for the user, replacing the existing one if it exists."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: "The image file to upload"
      responses:
        200:
          description: "Profile image uploaded successfully."
          schema:
            type: object
            properties:
              image:
                type: string
                example: "uploaded"
        400:
          description: "Bad request due to missing or empty file."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "no file selected"
        415:
          description: "Unsupported Media Type (invalid file format)."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported Media Type"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/profile/remove-image:
    delete:
      summary: "Remove the profile image of the user"
      description: "Remove the profile picture for the user if it exists."
      responses:
        200:
          description: "Profile image removed successfully."
          schema:
            type: object
            properties:
              image:
                type: string
                example: "removed successfully"
        404:
          description: "Image not found or path doesn't exist."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "image not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Driver Ride Management
  /api/swagger_driver/availability:
    get:
      summary: "Check driver's availability"
      description: "Retrieves the current availability status of the driver (online/offline)."
      responses:
        200:
          description: "Availability status"
          schema:
            type: object
            properties:
              availability:
                type: object
                example:
                  location_id: "location id"
                  is_available: true
                  last_active: "2024-10-30T12:45:00Z"
        404:
          description: "Availability information not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/ride-plans:
    get:
      summary: "Get driver's ride plans"
      description: "Fetches the current status and list of rides available to the driver."
      responses:
        200:
          description: "Driver's active ride plans"
          schema:
            type: object
            properties:
              rides:
                type: array
                items:
                  type: object
                  example:
                    id: "trip_id"
                    pickup_time: "2024-10-30T12:45:00Z"
                    dropoff_time: "2024-10-30T13:30:00Z"
                    pickup_location_id: "location id"
                    dropoff_location_id: "location id"
                    fare: 20.5
                    distance: 120.2
                    status: "scheduled"
                    is_available: true
        404:
          description: "No trips found for the driver"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/current-ride/{trip_id}:
    get:
      summary: "Get details of the current ride"
      description: "Fetches details of a specific ride associated with the driver, including pickup/dropoff locations and the number of passengers."
      parameters:
        - name: trip_id
          in: path
          required: true
          type: string
          description: "The ID of the trip to retrieve"
      responses:
        200:
          description: "Current ride details"
          schema:
            type: object
            properties:
              ride:
                type: object
                example:
                  id: "trip_id"
                  pickup_location_id:
                    id: "location_id_1"
                    latitude: 12.34
                    longitude: 56.78
                    address: "Bole"
                  dropoff_location_id:
                    id: "location_id_2"
                    latitude: 12.34
                    longitude: 56.78
                    address: "Adama"
                  pickup_time: "2024-10-30T12:45:00Z"
                  dropoff_time: "2024-10-30T13:30:00Z"
                  fare: 20.5
                  distance: 10.0
                  status: "ongoing"
                  number_of_passengers: 2
                  is_available: false
        400:
          description: "Driver is not authorized for the trip"
        404:
          description: "Trip not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/ride-requests:
    get:
      summary: "Get ride requests for the driver"
      description: "Displays all incoming ride requests and onboard riders for the driver."
      responses:
        200:
          description: "List of riders associated with the driver's trips"
          schema:
            type: object
            properties:
              riders:
                type: object
                Trip.trip_id:
                  type: object
                  example:
                    Rider.rider_id:
                      username: "rider_username"
                      first_name: "Jane"
                      last_name: "Doe"
                      phone_number: "123-456-7890"
                      email: "rider@example.com"
                      payment_method: "Cash"
        404:
          description: "No requests found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/start-ride:
    post:
      summary: "Start a ride"
      description: "Marks a ride as 'Started' after the pickup is completed."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip to start"
      responses:
        200:
          description: "Ride started successfully"
          schema:
            type: object
            properties:
              ride:
                type: string
                example: "Started"
        400:
          description: "Trip ID missing from request body"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/end-ride:
    post:
      summary: "End a ride"
      description: "Marks a ride as 'Completed' and updates all associated riders' statuses."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip to complete"
      responses:
        200:
          description: "Ride completed successfully"
          schema:
            type: object
            properties:
              ride:
                type: string
                example: "Completed"
        400:
          description: "Trip ID missing from request body"
        404:
          description: "No active riders found for the trip"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/cancel-ride:
    post:
      summary: "Cancel a ride"
      description: "Cancels a ride and updates the statuses of associated riders."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip to cancel"
      responses:
        200:
          description: "Ride canceled successfully"
          schema:
            type: object
            properties:
              ride:
                type: string
                example: "Canceled"
        400:
          description: "Trip ID missing from request body"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Driver Ride History And Earning
  /api/swagger_driver/ride-history:
    get:
      summary: "Get driver's ride history"
      description: "Fetches all completed and unavailable trips for the driver."
      responses:
        200:
          description: "Driver's ride history"
          schema:
            type: object
            properties:
              rides:
                type: object
                additionalProperties:
                  type: object
                  example:
                    id: "trip_id"
                    pickup_time: "2024-10-30T12:45:00Z"
                    dropoff_time: "2024-10-30T13:30:00Z"
                    dropoff_location_id: "location id"
                    pickup_location_id: "location id"
                    fare: 20.5
                    status: "completed"
                    distance: 10.0
                    is_available: false
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/earnings/{date}:
    get:
      summary: "Get the earnings for a specific date"
      description: "Show driver's earnings for a specific date, month, and year, or by date if provided."
      parameters:
        - name: date
          in: path
          required: false
          description: "Date in the format DD-MM-YYYY to filter the earnings."
          schema:
            type: string
            example: "15-11-2024"
      responses:
        200:
          description: "Earnings retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  earning:
                    type: object
                    properties:
                      day_15_earning:
                        type: number
                        example: 200
                      month_11_earning:
                        type: number
                        example: 4000
                      year_2024_earning:
                        type: number
                        example: 50000
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/earnings:
    get:
      summary: "Get the overall earnings"
      description: "Show the total earnings for the driver including today's, yesterday's, this month's, last month's, and this year's earnings. if date not provided"
      responses:
        200:
          description: "Earnings retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  earning:
                    type: object
                    properties:
                      total_earning:
                        type: number
                        example: 15000
                      today_earning:
                        type: number
                        example: 500
                      yesterday_earning:
                        type: number
                        example: 450
                      this_month_earning:
                        type: number
                        example: 1200
                      last_month_earning:
                        type: number
                        example: 1100
                      this_year_earning:
                        type: number
                        example: 15000
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Notification
  /api/swagger_driver/report-issue:
    post:
      summary: "Report an issue"
      description: "Report an issue by sending a notification to the admins."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "The issue message to send to admins."
                  example: "There is an issue with the payment processing."
      responses:
        201:
          description: "Issue reported successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue:
                    type: string
                    example: "reported"
        400:
          description: "Message missing."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "message missing"
        415:
          description: "Unsupported media type."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid JSON format"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/notifications:
    get:
      summary: "Get all notifications"
      description: "Retrieve all notifications related to the driver."
      responses:
        200:
          description: "Notifications retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: dict
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "notif123"
                        created_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        updated_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T10:00:00Z"
                        sent_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        sender_id:
                          type: string
                          example: "admin292i1w"
                        receiver_id:
                          type: string
                          example: "driver456"
                        message:
                          type: string
                          example: "meeting at 10:30"
                        notification_type:
                          type: string
                          example: "announcement"
                        is_read:
                          type: boolean
                          example: false
                        read_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_driver/notification/{notification_id}:
    get:
      summary: "Get a specific notification"
      description: "Retrieve a specific notification by its ID."
      parameters:
        - name: notification_id
          in: path
          required: true
          description: "The notification ID."
          schema:
            type: string
            example: "12345"
      responses:
        200:
          description: "Notification retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: dict
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "notif123"
                        created_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        updated_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T10:00:00Z"
                        sent_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        sender_id:
                          type: string
                          example: "admin292i1w"
                        receiver_id:
                          type: string
                          example: "driver456"
                        message:
                          type: string
                          example: "meeting at 10:30"
                        notification_type:
                          type: string
                          example: "announcement"
                        is_read:
                          type: boolean
                          example: true
                        read_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
        404:
          description: "Notification not found."
          schema:
            type: object
            properties:
              notification:
                type: string
                example: "notification not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  #Swagger_rider
  /api/swagger_rider/register:
    post:
      summary: "Register a new rider"
      description: "Registers a new rider with the required user data."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                example: "dani"
              first_name:
                type: string
                example: "daniel"
              last_name:
                type: string
                example: "abera"
              email:
                type: string
                format: email
                example: "rider@example.com"
              phone_number:
                type: string
                example: "+251934567890"
              password_hash:
                type: string
                example: "secure_password_hash"
              payment_method:
                type: string
                example: "TeleBirr"
      responses:
        201:
          description: "Rider registered successfully"
          schema:
            type: object
            properties:
              user:
                type: string
                example: "Rider Id"
        400:
          description: "Missing required user data"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "username missing"
        415:
          description: "Unsupported media type"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  /api/swagger_rider/login:
    post:
      summary: "rider login"
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        200:
          schema:
            type: object
            properties:
              user:
                type: string
                example: "jwt generated code"
        415:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported media type"
        400:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "email missing"
                example2: "incorrect password"
        500:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  /api/swagger_rider/logout:

  ##Rider Profile Management
  /api/swagger_rider/reset-token:
    post:
      summary: "Request a reset token"
      description: "Sends a reset token to the rider's email."
      parameters:
        - name: email
          in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: "rider@example.com"
      responses:
        201:
          description: "Reset token generated successfully"
          schema:
            type: object
            properties:
              reset_token:
                type: string
                example: "reset-token-123"
        400:
          description: "Email missing from request"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "email not given"
        404:
          description: "User not found"
        415:
          description: "Unsupported media type"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/forget-password:
    post:
      summary: "Reset password using token"
      description: "Allows rider to reset password using a provided reset token."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              reset_token:
                type: string
                example: "reset-token-123"
              password_hash:
                type: string
                example: "new_secure_password_hash"
      responses:
        200:
          description: "Password updated successfully"
          schema:
            type: object
            properties:
              update:
                type: string
                example: "Successful"
        400:
          description: "Missing or incorrect information"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "password not provided"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/profile:
    get:
      summary: "Get rider profile"
      description: "Retrieves the profile information of the authenticated rider."
      responses:
        200:
          description: "Rider profile data"
          schema:
            type: object
            properties:
              user:
                type: object
                example: { "users_key": "value" }
        404:
          description: "User not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

    put:
      summary: "Update rider profile"
      description: "Allows rider to update their profile and password by provideing they informations they want to update."
      parameters:
        - name: user_data
          in: body
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
                example: "abrha"
              last_name:
                type: string
                example: "john"
              password_hash:
                type: string
                example: "new_secure_password_hash"
              old_password:
                type: string
                example: "old_password"
      responses:
        200:
          description: "Profile updated successfully"
          schema:
            type: object
            properties:
              user:
                type: string
                example: "updated Successfully"
        400:
          description: "Missing required information or incorrect password"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "old password incorrect"
        500:
          description: "Update failed due to server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/profile/image:
    get:
      summary: "Get the profile image of the user"
      description: "Retrieve the profile picture for the user if it exists."
      responses:
        200:
          description: "Profile image retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: "The profile image of the user"
        404:
          description: "Image not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "image not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
    post:
      summary: "Upload a profile image for the user"
      description: "Upload a profile picture for the user, replacing the existing one if it exists."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: "The image file to upload"
      responses:
        200:
          description: "Profile image uploaded successfully."
          schema:
            type: object
            properties:
              image:
                type: string
                example: "uploaded"
        400:
          description: "Bad request due to missing or empty file."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "no file selected"
        415:
          description: "Unsupported Media Type (invalid file format)."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unsupported Media Type"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/profile/remove-image:
    delete:
      summary: "Remove the profile image of the user"
      description: "Remove the profile picture for the user if it exists."
      responses:
        200:
          description: "Profile image removed successfully."
          schema:
            type: object
            properties:
              image:
                type: string
                example: "removed successfully"
        404:
          description: "Image not found or path doesn't exist."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "image not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Rider Ride Booking
  /api/swagger_rider/available-rides:
    get:
      summary: "View available rides"
      description: "Fetches all available trips with driver, vehicle, and location details."
      responses:
        200:
          description: "A list of available trips"
          schema:
            type: object
            properties:
              trips:
                type: object
                Trip.trip_id:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "trip_id_123"
                    vehicle_holds:
                      type: integer
                      example: 4
                      description: "Total seating capacity of the vehicle"
                    available_seats:
                      type: integer
                      example: 3
                      description: "Number of available seats on this trip"
                    driver_id:
                      type: object
                    pickup_location_id:
                      type: object
                    dropoff_location_id:
                      type: object
                    pickup_time:
                      type: string
                      example: "2024-10-30T12:45:00Z"
                    dropoff_time:
                      type: string
                      example: "2024-10-30T13:30:00Z"
                    fare:
                      type: number
                      example: 210
                    distance:
                      type: number
                      example: 212.2
                    is_available:
                      type: boolean
                      example: true

        404:
          description: "No available trips found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/book-ride:
    post:
      summary: "Book a ride"
      description: "Books a ride for the rider if seats are available or rebooks a canceled ride."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip to book"
      responses:
        201:
          description: "Ride booked successfully"
          schema:
            type: object
            properties:
              ride:
                type: string
                example: "you have booked a ride"
        200:
          description: "Ride already booked by the user"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "you have already booked a ride"
        400:
          description: "Trip ID missing from request body"
        409:
          description: "No available seats on this trip"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "maximum seat capacity"
        404:
          description: "Trip not found or data missing"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/booked-ride:
    get:
      summary: "View all booked rides"
      description: "Fetches all future booked rides for the rider."
      responses:
        200:
          description: "A list of future booked rides"
          schema:
            type: object
            properties:
              ride:
                type: object
                Trip.trip_id:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "trip_id_123"
                    driver_id:
                      type: object
                    pickup_location_id: "location id"
                    dropoff_location_id: "location id"
                    pickup_time:
                      type: string
                      example: "2024-10-30T12:45:00Z"
                    dropoff_time:
                      type: string
                      example: "2024-10-30T13:30:00Z"
                    trip_ride_id: "trip_ride_id123"
                    fare:
                      type: number
                      example: 210
                    distance:
                      type: number
                      example: 212.2
                    is_available:
                      type: boolean
                      example: true
        404:
          description: "No booked rides found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/current-ride/{tripride_id}:
    get:
      summary: "View current ride details"
      description: "Fetches the details of the current ride."
      parameters:
        - name: tripride_id
          in: path
          required: true
          type: string
          description: "The ID of the booked ride."
      responses:
        200:
          description: "Current ride details"
          schema:
            type: object
            properties:
              ride:
                type: object
                properties:
                  id:
                    type: string
                    example: "trip_id_123"
                  driver_id:
                    type: object
                  pickup_location_id:
                    type: object
                  dropoff_location_id:
                    type: object
                  pickup_time:
                    type: string
                    example: "2024-10-30T12:45:00Z"
                  dropoff_time:
                    type: string
                    example: "2024-10-30T13:30:00Z"
                  fare:
                    type: number
                    example: 210
                  distance:
                    type: number
                    example: 212.2
                  is_available:
                    type: boolean
                    example: true
                  status: "ongoing"
        404:
          description: "Current ride not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/ride-status/{tripride_id}:
    get:
      summary: "Check ride status"
      description: "Fetches details of the ride request."
      parameters:
        - name: tripride_id
          in: path
          required: true
          type: string
          description: "The ID of the ride request."
      responses:
        200:
          description: "Ride status details"
          schema:
            type: object
            properties:
              ride:
                type: object
                properties:
                  pickup_location:
                    type: object
                  dropoff_location:
                    type: object
                  pickup_time:
                    type: string
                    example: "2024-10-31T10:00:00Z"
                  status:
                    type: string
                    example: "Pending"
                  seats_left:
                    type: integer
                    example: 2
                  distance:
                    type: number
                    example: 15.5
                  fare:
                    type: number
                    example: 30.0
        404:
          description: "Ride status not found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/ride-estimate:
    post:
      summary: "Get ride estimate"
      description: "Estimate the time of arrival (ETA) and other details based on distance, speed, and remaining distance."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                distance:
                  type: number
                  description: "Total distance of the ride in kilometers."
                  example: 15.5
                km/h:
                  type: number
                  description: "Current speed in km/h."
                  example: 60
                km_left:
                  type: number
                  description: "Remaining distance to the destination in kilometers."
                  example: 5
                trip_id:
                  type: string
                  description: "The unique identifier for the trip."
                  example: "12345"
      responses:
        200:
          description: "Ride estimate retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  estimate:
                    type: object
                    properties:
                      eta:
                        type: number
                        description: "Estimated time of arrival in hours."
                        example: 0.083
                      km/h:
                        type: number
                        description: "Current speed in km/h."
                        example: 60
                      km_left:
                        type: number
                        description: "Remaining distance in kilometers."
                        example: 5
                      pickup_time:
                        type: string
                        format: date-time
                        description: "The time when the ride was picked up."
                        example: "2024-11-19T10:00:00Z"
                      expected_time_arrival:
                        type: string
                        description: "Estimated time of arrival at the destination."
                        example: "2024-11-19T10:05:00Z"
                      pickup_location:
                        type: string
                        description: "The pickup location for the ride."
                        example: "123 Main St"
                      dropoff_location:
                        type: string
                        description: "The dropoff location for the ride."
                        example: "456 Elm St"
                      distance:
                        type: number
                        description: "Total distance of the ride in kilometers."
                        example: 15.5
        400:
          description: "Bad request, missing parameters."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "distance missing"
        404:
          description: "Trip not found."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "trip not found"
        415:
          description: "Unsupported media type."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid JSON format"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        401:
          description: "Unauthorized to access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
        403:
          description: "Access not allowed."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"

  ## Rider History And Management
  /api/swagger_rider/ride-history:
    get:
      summary: "Get past rides"
      description: "Fetches all past trips for the rider."
      responses:
        200:
          description: "A list of past rides"
          schema:
            type: object
            properties:
              ride:
                type: object
                Trip.trip_id:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "trip_id_123"
                    driver_id: "driver id"
                    pickup_location_id: "location id"
                    dropoff_location_id: "location id"
                    pickup_time:
                      type: string
                      example: "2024-10-30T12:45:00Z"
                    dropoff_time:
                      type: string
                      example: "2024-10-30T13:30:00Z"
                    fare:
                      type: number
                      example: 210
                    distance:
                      type: number
                      example: 212.2
                    is_available:
                      type: boolean
                      example: false
                    status: "canceled"
        404:
          description: "No past rides found"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/cancel-ride:
    post:
      summary: "Cancel a ride"
      description: "Cancels a booked ride."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip to cancel"
      responses:
        200:
          description: "Ride canceled successfully"
          schema:
            type: object
            properties:
              trip:
                type: string
                example: "Canceled"
        400:
          description: "Trip ID missing from request body"
        404:
          description: "Trip not found"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  ##Rider Payment
  /api/swagger_rider/pay-ride:
    post:
      summary: "Make payment for a completed trip"
      description: "Processes payment for a completed ride."
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              amount:
                type: number
                example: 30.0
                description: "The amount to be paid for the ride"
              status:
                type: string
                example: "Paid"
                description: "The payment status"
              trip_id:
                type: string
                example: "trip_id_123"
                description: "The ID of the trip for which payment is being made"
      responses:
        201:
          description: "Payment processed successfully"
          schema:
            type: object
            properties:
              payment:
                type: string
                example: "paid"
        400:
          description: "Invalid payment details or amount mismatch"
        404:
          description: "Trip not found"
        415:
          description: "Unsupported media type"
        500:
          description: "Internal server error"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/transactions:
    get:
      summary: "Get all transactions made by rider"
      description: "Fetches all payment transactions associated with a rider."
      parameters:
        - name: "order_by"
          in: "query"
          description: "The column by which to order the transactions. Default is 'created_at'."
          required: false
          schema:
            type: string
            example: "created_at"
      responses:
        200:
          description: "Transactions retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: "Unique transaction identifier."
                          example: "abc123"
                        trip_id:
                          type: string
                          description: "Unique trip identifier."
                          example: "abc12sadsa3"
                        rider_id:
                          type: string
                          description: "Rider's unique identifier."
                          example: "rider123"
                        amount:
                          type: number
                          description: "Amount of the transaction."
                          example: 50.75
                        payment_method:
                          type: string
                          description: "Payment method used for the transaction."
                          example: "credit_card"
                        transaction_time:
                          type: string
                          format: date-time
                          description: "Time when the transaction was made."
                          example: "2024-11-19T10:00:00Z"
                        payment_status:
                          type: string
                          description: "Status of the transaction."
                          example: "completed"
        400:
          description: "Bad request, invalid query parameters."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid order_by value"
        401:
          description: "Unauthorized access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
        403:
          description: "Forbidden access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"

  ##Rider Rating And Feedback
  /api/swagger_rider/report-issue:
    post:
      summary: "Report an issue"
      description: "Report an issue by sending a notification to the admins."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "The issue message to send to admins."
                  example: "There is an issue with the payment processing."
      responses:
        201:
          description: "Issue reported successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue:
                    type: string
                    example: "reported"
        400:
          description: "Message missing."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "message missing"
        415:
          description: "Unsupported media type."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid JSON format"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/notifications:
    get:
      summary: "Get all notifications"
      description: "Retrieve all notifications related to the rider."
      responses:
        200:
          description: "Notifications retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: dict
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "notif123"
                        created_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        updated_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T10:00:00Z"
                        sent_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        sender_id:
                          type: string
                          example: "admin292i1w"
                        receiver_id:
                          type: string
                          example: "rider456"
                        message:
                          type: string
                          example: "meeting at 10:30"
                        notification_type:
                          type: string
                          example: "announcement"
                        is_read:
                          type: boolean
                          example: false
                        read_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"

  /api/swagger_rider/notification/{notification_id}:
    get:
      summary: "Get a specific notification"
      description: "Retrieve a specific notification by its ID."
      parameters:
        - name: notification_id
          in: path
          required: true
          description: "The notification ID."
          schema:
            type: string
            example: "12345"
      responses:
        200:
          description: "Notification retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: dict
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "notif123"
                        created_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        updated_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T10:00:00Z"
                        sent_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
                        sender_id:
                          type: string
                          example: "admin292i1w"
                        receiver_id:
                          type: string
                          example: "rider456"
                        message:
                          type: string
                          example: "meeting at 10:30"
                        notification_type:
                          type: string
                          example: "announcement"
                        is_read:
                          type: boolean
                          example: true
                        read_at:
                          type: string
                          format: datetime
                          example: "2024-11-19T08:00:00Z"
        404:
          description: "Notification not found."
          schema:
            type: object
            properties:
              notification:
                type: string
                example: "notification not found"
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal error occurred"
        403:
          description: "Access not allowed"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access not allowed"
        401:
          description: "Unauthorized to access"
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Token has expired"
                example2: "Invalid Token"
